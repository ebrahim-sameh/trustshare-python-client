# coding: utf-8

"""
    trustshare API

    Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # noqa: E501

    OpenAPI spec version: 1.0.23
    Contact: support@trustshare.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddressInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'AddressType',
        'address_line_1': 'str',
        'address_line_2': 'str',
        'town_city': 'str',
        'region': 'str',
        'postal_code': 'str',
        'country': 'Country'
    }

    attribute_map = {
        'type': 'type',
        'address_line_1': 'address_line_1',
        'address_line_2': 'address_line_2',
        'town_city': 'town_city',
        'region': 'region',
        'postal_code': 'postal_code',
        'country': 'country'
    }

    def __init__(self, type=None, address_line_1=None, address_line_2=None, town_city=None, region=None, postal_code=None, country=None):  # noqa: E501
        """AddressInput - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._address_line_1 = None
        self._address_line_2 = None
        self._town_city = None
        self._region = None
        self._postal_code = None
        self._country = None
        self.discriminator = None
        if type is not None:
            self.type = type
        self.address_line_1 = address_line_1
        if address_line_2 is not None:
            self.address_line_2 = address_line_2
        self.town_city = town_city
        if region is not None:
            self.region = region
        self.postal_code = postal_code
        self.country = country

    @property
    def type(self):
        """Gets the type of this AddressInput.  # noqa: E501


        :return: The type of this AddressInput.  # noqa: E501
        :rtype: AddressType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AddressInput.


        :param type: The type of this AddressInput.  # noqa: E501
        :type: AddressType
        """

        self._type = type

    @property
    def address_line_1(self):
        """Gets the address_line_1 of this AddressInput.  # noqa: E501

        First line of the address.  # noqa: E501

        :return: The address_line_1 of this AddressInput.  # noqa: E501
        :rtype: str
        """
        return self._address_line_1

    @address_line_1.setter
    def address_line_1(self, address_line_1):
        """Sets the address_line_1 of this AddressInput.

        First line of the address.  # noqa: E501

        :param address_line_1: The address_line_1 of this AddressInput.  # noqa: E501
        :type: str
        """
        if address_line_1 is None:
            raise ValueError("Invalid value for `address_line_1`, must not be `None`")  # noqa: E501

        self._address_line_1 = address_line_1

    @property
    def address_line_2(self):
        """Gets the address_line_2 of this AddressInput.  # noqa: E501

        Second line of the address.  # noqa: E501

        :return: The address_line_2 of this AddressInput.  # noqa: E501
        :rtype: str
        """
        return self._address_line_2

    @address_line_2.setter
    def address_line_2(self, address_line_2):
        """Sets the address_line_2 of this AddressInput.

        Second line of the address.  # noqa: E501

        :param address_line_2: The address_line_2 of this AddressInput.  # noqa: E501
        :type: str
        """

        self._address_line_2 = address_line_2

    @property
    def town_city(self):
        """Gets the town_city of this AddressInput.  # noqa: E501

        The town/city of the address.  # noqa: E501

        :return: The town_city of this AddressInput.  # noqa: E501
        :rtype: str
        """
        return self._town_city

    @town_city.setter
    def town_city(self, town_city):
        """Sets the town_city of this AddressInput.

        The town/city of the address.  # noqa: E501

        :param town_city: The town_city of this AddressInput.  # noqa: E501
        :type: str
        """
        if town_city is None:
            raise ValueError("Invalid value for `town_city`, must not be `None`")  # noqa: E501

        self._town_city = town_city

    @property
    def region(self):
        """Gets the region of this AddressInput.  # noqa: E501

        The region of the address.  # noqa: E501

        :return: The region of this AddressInput.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AddressInput.

        The region of the address.  # noqa: E501

        :param region: The region of this AddressInput.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressInput.  # noqa: E501

        The postal code of the address.  # noqa: E501

        :return: The postal_code of this AddressInput.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressInput.

        The postal code of the address.  # noqa: E501

        :param postal_code: The postal_code of this AddressInput.  # noqa: E501
        :type: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this AddressInput.  # noqa: E501


        :return: The country of this AddressInput.  # noqa: E501
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressInput.


        :param country: The country of this AddressInput.  # noqa: E501
        :type: Country
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
