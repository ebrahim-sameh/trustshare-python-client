# coding: utf-8

"""
    trustshare API

    Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # noqa: E501

    OpenAPI spec version: 1.0.23
    Contact: support@trustshare.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntentsSetupBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'SetupIntentType',
        'participant': 'ParticipantInput',
        'metadata': 'object'
    }

    attribute_map = {
        'type': 'type',
        'participant': 'participant',
        'metadata': 'metadata'
    }

    def __init__(self, type=None, participant=None, metadata=None):  # noqa: E501
        """IntentsSetupBody - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._participant = None
        self._metadata = None
        self.discriminator = None
        self.type = type
        self.participant = participant
        if metadata is not None:
            self.metadata = metadata

    @property
    def type(self):
        """Gets the type of this IntentsSetupBody.  # noqa: E501


        :return: The type of this IntentsSetupBody.  # noqa: E501
        :rtype: SetupIntentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IntentsSetupBody.


        :param type: The type of this IntentsSetupBody.  # noqa: E501
        :type: SetupIntentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def participant(self):
        """Gets the participant of this IntentsSetupBody.  # noqa: E501


        :return: The participant of this IntentsSetupBody.  # noqa: E501
        :rtype: ParticipantInput
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this IntentsSetupBody.


        :param participant: The participant of this IntentsSetupBody.  # noqa: E501
        :type: ParticipantInput
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")  # noqa: E501

        self._participant = participant

    @property
    def metadata(self):
        """Gets the metadata of this IntentsSetupBody.  # noqa: E501

        A free-form metadata object that you can use to store against the intent. This is incredibly useful for storing a correlation ID that relates to an entity on your own system.  # noqa: E501

        :return: The metadata of this IntentsSetupBody.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IntentsSetupBody.

        A free-form metadata object that you can use to store against the intent. This is incredibly useful for storing a correlation ID that relates to an entity on your own system.  # noqa: E501

        :param metadata: The metadata of this IntentsSetupBody.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntentsSetupBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntentsSetupBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
