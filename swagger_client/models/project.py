# coding: utf-8

"""
    trustshare API

    Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # noqa: E501

    OpenAPI spec version: 1.0.23
    Contact: support@trustshare.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'type': 'ProjectType',
        'currency': 'Currency',
        'status': 'ProjectStatus',
        'balance': 'int',
        'checkouts': 'list[Checkout]',
        'settlements': 'list[Settlement]',
        'inbounds': 'list[Inbound]',
        'outbounds': 'list[Outbound]',
        'transfers': 'ProjectTransfers',
        'collect': 'Collect',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'type': 'type',
        'currency': 'currency',
        'status': 'status',
        'balance': 'balance',
        'checkouts': 'checkouts',
        'settlements': 'settlements',
        'inbounds': 'inbounds',
        'outbounds': 'outbounds',
        'transfers': 'transfers',
        'collect': 'collect',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, type=None, currency=None, status=None, balance=None, checkouts=None, settlements=None, inbounds=None, outbounds=None, transfers=None, collect=None, metadata=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._type = None
        self._currency = None
        self._status = None
        self._balance = None
        self._checkouts = None
        self._settlements = None
        self._inbounds = None
        self._outbounds = None
        self._transfers = None
        self._collect = None
        self._metadata = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if type is not None:
            self.type = type
        if currency is not None:
            self.currency = currency
        if status is not None:
            self.status = status
        if balance is not None:
            self.balance = balance
        if checkouts is not None:
            self.checkouts = checkouts
        if settlements is not None:
            self.settlements = settlements
        if inbounds is not None:
            self.inbounds = inbounds
        if outbounds is not None:
            self.outbounds = outbounds
        if transfers is not None:
            self.transfers = transfers
        if collect is not None:
            self.collect = collect
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501

        A unique ID for the project.  A string in the format `project_[0-9a-z]`.  # noqa: E501

        :return: The id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.

        A unique ID for the project.  A string in the format `project_[0-9a-z]`.  # noqa: E501

        :param id: The id of this Project.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Project.  # noqa: E501

        The date the project was created.  # noqa: E501

        :return: The created_at of this Project.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Project.

        The date the project was created.  # noqa: E501

        :param created_at: The created_at of this Project.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Project.  # noqa: E501

        The date the project was last updated.  # noqa: E501

        :return: The updated_at of this Project.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Project.

        The date the project was last updated.  # noqa: E501

        :param updated_at: The updated_at of this Project.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def type(self):
        """Gets the type of this Project.  # noqa: E501


        :return: The type of this Project.  # noqa: E501
        :rtype: ProjectType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Project.


        :param type: The type of this Project.  # noqa: E501
        :type: ProjectType
        """

        self._type = type

    @property
    def currency(self):
        """Gets the currency of this Project.  # noqa: E501


        :return: The currency of this Project.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Project.


        :param currency: The currency of this Project.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    @property
    def status(self):
        """Gets the status of this Project.  # noqa: E501


        :return: The status of this Project.  # noqa: E501
        :rtype: ProjectStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Project.


        :param status: The status of this Project.  # noqa: E501
        :type: ProjectStatus
        """

        self._status = status

    @property
    def balance(self):
        """Gets the balance of this Project.  # noqa: E501

        The sum of all unreconciled inbounds and funding settlement balances currently in the underlying account.  # noqa: E501

        :return: The balance of this Project.  # noqa: E501
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Project.

        The sum of all unreconciled inbounds and funding settlement balances currently in the underlying account.  # noqa: E501

        :param balance: The balance of this Project.  # noqa: E501
        :type: int
        """

        self._balance = balance

    @property
    def checkouts(self):
        """Gets the checkouts of this Project.  # noqa: E501

        A list of [checkouts](/resources/checkouts) that have funded the project.  # noqa: E501

        :return: The checkouts of this Project.  # noqa: E501
        :rtype: list[Checkout]
        """
        return self._checkouts

    @checkouts.setter
    def checkouts(self, checkouts):
        """Sets the checkouts of this Project.

        A list of [checkouts](/resources/checkouts) that have funded the project.  # noqa: E501

        :param checkouts: The checkouts of this Project.  # noqa: E501
        :type: list[Checkout]
        """

        self._checkouts = checkouts

    @property
    def settlements(self):
        """Gets the settlements of this Project.  # noqa: E501

        A list of [settlements](/resources/settlements) against the project.  # noqa: E501

        :return: The settlements of this Project.  # noqa: E501
        :rtype: list[Settlement]
        """
        return self._settlements

    @settlements.setter
    def settlements(self, settlements):
        """Sets the settlements of this Project.

        A list of [settlements](/resources/settlements) against the project.  # noqa: E501

        :param settlements: The settlements of this Project.  # noqa: E501
        :type: list[Settlement]
        """

        self._settlements = settlements

    @property
    def inbounds(self):
        """Gets the inbounds of this Project.  # noqa: E501

        A list of [inbounds](/resources/inbounds) which denote physical receipt of funds into the project account.  # noqa: E501

        :return: The inbounds of this Project.  # noqa: E501
        :rtype: list[Inbound]
        """
        return self._inbounds

    @inbounds.setter
    def inbounds(self, inbounds):
        """Sets the inbounds of this Project.

        A list of [inbounds](/resources/inbounds) which denote physical receipt of funds into the project account.  # noqa: E501

        :param inbounds: The inbounds of this Project.  # noqa: E501
        :type: list[Inbound]
        """

        self._inbounds = inbounds

    @property
    def outbounds(self):
        """Gets the outbounds of this Project.  # noqa: E501

        A list of [outbounds](/resources/outbounds) that have sent funds from the project account.  # noqa: E501

        :return: The outbounds of this Project.  # noqa: E501
        :rtype: list[Outbound]
        """
        return self._outbounds

    @outbounds.setter
    def outbounds(self, outbounds):
        """Sets the outbounds of this Project.

        A list of [outbounds](/resources/outbounds) that have sent funds from the project account.  # noqa: E501

        :param outbounds: The outbounds of this Project.  # noqa: E501
        :type: list[Outbound]
        """

        self._outbounds = outbounds

    @property
    def transfers(self):
        """Gets the transfers of this Project.  # noqa: E501


        :return: The transfers of this Project.  # noqa: E501
        :rtype: ProjectTransfers
        """
        return self._transfers

    @transfers.setter
    def transfers(self, transfers):
        """Sets the transfers of this Project.


        :param transfers: The transfers of this Project.  # noqa: E501
        :type: ProjectTransfers
        """

        self._transfers = transfers

    @property
    def collect(self):
        """Gets the collect of this Project.  # noqa: E501


        :return: The collect of this Project.  # noqa: E501
        :rtype: Collect
        """
        return self._collect

    @collect.setter
    def collect(self, collect):
        """Sets the collect of this Project.


        :param collect: The collect of this Project.  # noqa: E501
        :type: Collect
        """

        self._collect = collect

    @property
    def metadata(self):
        """Gets the metadata of this Project.  # noqa: E501

        The metadata that was provided at the creation of the project.  # noqa: E501

        :return: The metadata of this Project.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Project.

        The metadata that was provided at the creation of the project.  # noqa: E501

        :param metadata: The metadata of this Project.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
