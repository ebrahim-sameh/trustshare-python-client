# coding: utf-8

"""
    trustshare API

    Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # noqa: E501

    OpenAPI spec version: 1.0.23
    Contact: support@trustshare.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntentsPaymentBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'IntentType',
        'currency': 'Currency',
        '_from': 'ParticipantInput',
        'project_id': 'str',
        'fee_flat': 'int',
        'fee_percentage': 'float',
        'settlements': 'list[SettlementInput]',
        'redirect_url': 'str',
        'metadata': 'object'
    }

    attribute_map = {
        'type': 'type',
        'currency': 'currency',
        '_from': 'from',
        'project_id': 'project_id',
        'fee_flat': 'fee_flat',
        'fee_percentage': 'fee_percentage',
        'settlements': 'settlements',
        'redirect_url': 'redirect_url',
        'metadata': 'metadata'
    }

    def __init__(self, type=None, currency=None, _from=None, project_id=None, fee_flat=None, fee_percentage=None, settlements=None, redirect_url=None, metadata=None):  # noqa: E501
        """IntentsPaymentBody - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._currency = None
        self.__from = None
        self._project_id = None
        self._fee_flat = None
        self._fee_percentage = None
        self._settlements = None
        self._redirect_url = None
        self._metadata = None
        self.discriminator = None
        self.type = type
        if currency is not None:
            self.currency = currency
        if _from is not None:
            self._from = _from
        if project_id is not None:
            self.project_id = project_id
        if fee_flat is not None:
            self.fee_flat = fee_flat
        if fee_percentage is not None:
            self.fee_percentage = fee_percentage
        self.settlements = settlements
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if metadata is not None:
            self.metadata = metadata

    @property
    def type(self):
        """Gets the type of this IntentsPaymentBody.  # noqa: E501


        :return: The type of this IntentsPaymentBody.  # noqa: E501
        :rtype: IntentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IntentsPaymentBody.


        :param type: The type of this IntentsPaymentBody.  # noqa: E501
        :type: IntentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def currency(self):
        """Gets the currency of this IntentsPaymentBody.  # noqa: E501


        :return: The currency of this IntentsPaymentBody.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this IntentsPaymentBody.


        :param currency: The currency of this IntentsPaymentBody.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    @property
    def _from(self):
        """Gets the _from of this IntentsPaymentBody.  # noqa: E501


        :return: The _from of this IntentsPaymentBody.  # noqa: E501
        :rtype: ParticipantInput
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this IntentsPaymentBody.


        :param _from: The _from of this IntentsPaymentBody.  # noqa: E501
        :type: ParticipantInput
        """

        self.__from = _from

    @property
    def project_id(self):
        """Gets the project_id of this IntentsPaymentBody.  # noqa: E501

        Optionally provide a `project_id` to target the payemnt at an existing project account. If no `project_id` is provided, a new Project will be automatically provisioned for you.  # noqa: E501

        :return: The project_id of this IntentsPaymentBody.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this IntentsPaymentBody.

        Optionally provide a `project_id` to target the payemnt at an existing project account. If no `project_id` is provided, a new Project will be automatically provisioned for you.  # noqa: E501

        :param project_id: The project_id of this IntentsPaymentBody.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def fee_flat(self):
        """Gets the fee_flat of this IntentsPaymentBody.  # noqa: E501

        A flat fee to charge the buyer Participant on successfully completing a Checkout.  # noqa: E501

        :return: The fee_flat of this IntentsPaymentBody.  # noqa: E501
        :rtype: int
        """
        return self._fee_flat

    @fee_flat.setter
    def fee_flat(self, fee_flat):
        """Sets the fee_flat of this IntentsPaymentBody.

        A flat fee to charge the buyer Participant on successfully completing a Checkout.  # noqa: E501

        :param fee_flat: The fee_flat of this IntentsPaymentBody.  # noqa: E501
        :type: int
        """

        self._fee_flat = fee_flat

    @property
    def fee_percentage(self):
        """Gets the fee_percentage of this IntentsPaymentBody.  # noqa: E501

        A fee percentage to charge the buyer Participant on successfully completing a Checkout. Fee percentages must be provided as a fraction, ie. 1.5% as 0.015.  # noqa: E501

        :return: The fee_percentage of this IntentsPaymentBody.  # noqa: E501
        :rtype: float
        """
        return self._fee_percentage

    @fee_percentage.setter
    def fee_percentage(self, fee_percentage):
        """Sets the fee_percentage of this IntentsPaymentBody.

        A fee percentage to charge the buyer Participant on successfully completing a Checkout. Fee percentages must be provided as a fraction, ie. 1.5% as 0.015.  # noqa: E501

        :param fee_percentage: The fee_percentage of this IntentsPaymentBody.  # noqa: E501
        :type: float
        """

        self._fee_percentage = fee_percentage

    @property
    def settlements(self):
        """Gets the settlements of this IntentsPaymentBody.  # noqa: E501

        A list of settlements that the buyer Participant must fulfill.  # noqa: E501

        :return: The settlements of this IntentsPaymentBody.  # noqa: E501
        :rtype: list[SettlementInput]
        """
        return self._settlements

    @settlements.setter
    def settlements(self, settlements):
        """Sets the settlements of this IntentsPaymentBody.

        A list of settlements that the buyer Participant must fulfill.  # noqa: E501

        :param settlements: The settlements of this IntentsPaymentBody.  # noqa: E501
        :type: list[SettlementInput]
        """
        if settlements is None:
            raise ValueError("Invalid value for `settlements`, must not be `None`")  # noqa: E501

        self._settlements = settlements

    @property
    def redirect_url(self):
        """Gets the redirect_url of this IntentsPaymentBody.  # noqa: E501

        For both `checkout` and `payment_link` intent types you can provide a redirect URL that the user will be directed to at the end of the checkout process.  The URL will have the `project_id` and `checkout_id` appended to the query string. For example, given the redirect URL `https://example.com/complete`, your users will be redirected to `https://example.com/complete?checkout_id={checkout_id}&project_id={project_id}`.  <Note>   When using the SDK to confirm a `checkout` type payment intent, the   parent page — ie. the page opening the modal — will be redirected to this URL. </Note>  # noqa: E501

        :return: The redirect_url of this IntentsPaymentBody.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this IntentsPaymentBody.

        For both `checkout` and `payment_link` intent types you can provide a redirect URL that the user will be directed to at the end of the checkout process.  The URL will have the `project_id` and `checkout_id` appended to the query string. For example, given the redirect URL `https://example.com/complete`, your users will be redirected to `https://example.com/complete?checkout_id={checkout_id}&project_id={project_id}`.  <Note>   When using the SDK to confirm a `checkout` type payment intent, the   parent page — ie. the page opening the modal — will be redirected to this URL. </Note>  # noqa: E501

        :param redirect_url: The redirect_url of this IntentsPaymentBody.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def metadata(self):
        """Gets the metadata of this IntentsPaymentBody.  # noqa: E501

        A free-form metadata object that you can use to store against the intent. This is incredibly useful for storing a correlation ID that relates to an entity on your own system.  # noqa: E501

        :return: The metadata of this IntentsPaymentBody.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IntentsPaymentBody.

        A free-form metadata object that you can use to store against the intent. This is incredibly useful for storing a correlation ID that relates to an entity on your own system.  # noqa: E501

        :param metadata: The metadata of this IntentsPaymentBody.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntentsPaymentBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntentsPaymentBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
