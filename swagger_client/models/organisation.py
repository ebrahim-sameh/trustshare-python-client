# coding: utf-8

"""
    trustshare API

    Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # noqa: E501

    OpenAPI spec version: 1.0.23
    Contact: support@trustshare.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Organisation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'OrganisationType',
        'organisation_number': 'str',
        'registered_address': 'Address',
        'shipping_address': 'Address',
        'phone_number': 'str',
        'website': 'str',
        'persons': 'list[Person]'
    }

    attribute_map = {
        'type': 'type',
        'organisation_number': 'organisation_number',
        'registered_address': 'registered_address',
        'shipping_address': 'shipping_address',
        'phone_number': 'phone_number',
        'website': 'website',
        'persons': 'persons'
    }

    def __init__(self, type=None, organisation_number=None, registered_address=None, shipping_address=None, phone_number=None, website=None, persons=None):  # noqa: E501
        """Organisation - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._organisation_number = None
        self._registered_address = None
        self._shipping_address = None
        self._phone_number = None
        self._website = None
        self._persons = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if organisation_number is not None:
            self.organisation_number = organisation_number
        if registered_address is not None:
            self.registered_address = registered_address
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if phone_number is not None:
            self.phone_number = phone_number
        if website is not None:
            self.website = website
        if persons is not None:
            self.persons = persons

    @property
    def type(self):
        """Gets the type of this Organisation.  # noqa: E501


        :return: The type of this Organisation.  # noqa: E501
        :rtype: OrganisationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Organisation.


        :param type: The type of this Organisation.  # noqa: E501
        :type: OrganisationType
        """

        self._type = type

    @property
    def organisation_number(self):
        """Gets the organisation_number of this Organisation.  # noqa: E501

        The organisation's registered number.  # noqa: E501

        :return: The organisation_number of this Organisation.  # noqa: E501
        :rtype: str
        """
        return self._organisation_number

    @organisation_number.setter
    def organisation_number(self, organisation_number):
        """Sets the organisation_number of this Organisation.

        The organisation's registered number.  # noqa: E501

        :param organisation_number: The organisation_number of this Organisation.  # noqa: E501
        :type: str
        """

        self._organisation_number = organisation_number

    @property
    def registered_address(self):
        """Gets the registered_address of this Organisation.  # noqa: E501


        :return: The registered_address of this Organisation.  # noqa: E501
        :rtype: Address
        """
        return self._registered_address

    @registered_address.setter
    def registered_address(self, registered_address):
        """Sets the registered_address of this Organisation.


        :param registered_address: The registered_address of this Organisation.  # noqa: E501
        :type: Address
        """

        self._registered_address = registered_address

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Organisation.  # noqa: E501


        :return: The shipping_address of this Organisation.  # noqa: E501
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Organisation.


        :param shipping_address: The shipping_address of this Organisation.  # noqa: E501
        :type: Address
        """

        self._shipping_address = shipping_address

    @property
    def phone_number(self):
        """Gets the phone_number of this Organisation.  # noqa: E501

        The organisation's phone number.  # noqa: E501

        :return: The phone_number of this Organisation.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Organisation.

        The organisation's phone number.  # noqa: E501

        :param phone_number: The phone_number of this Organisation.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def website(self):
        """Gets the website of this Organisation.  # noqa: E501

        The organisation's website.  # noqa: E501

        :return: The website of this Organisation.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Organisation.

        The organisation's website.  # noqa: E501

        :param website: The website of this Organisation.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def persons(self):
        """Gets the persons of this Organisation.  # noqa: E501

        The organisation's members with significant control.  # noqa: E501

        :return: The persons of this Organisation.  # noqa: E501
        :rtype: list[Person]
        """
        return self._persons

    @persons.setter
    def persons(self, persons):
        """Sets the persons of this Organisation.

        The organisation's members with significant control.  # noqa: E501

        :param persons: The persons of this Organisation.  # noqa: E501
        :type: list[Person]
        """

        self._persons = persons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organisation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organisation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
