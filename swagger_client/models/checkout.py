# coding: utf-8

"""
    trustshare API

    Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # noqa: E501

    OpenAPI spec version: 1.0.23
    Contact: support@trustshare.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Checkout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'type': 'CheckoutType',
        'status': 'CheckoutStatus',
        'participant': 'KnownParticipant',
        'outstanding': 'int',
        'amount': 'int',
        'reference': 'str',
        'intent_id': 'str',
        'project_id': 'str',
        'transfers': 'list[Transfer]',
        'fees': 'list[Fee]',
        'settlements': 'list[Settlement]',
        'debits': 'list[Debit]',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'type': 'type',
        'status': 'status',
        'participant': 'participant',
        'outstanding': 'outstanding',
        'amount': 'amount',
        'reference': 'reference',
        'intent_id': 'intent_id',
        'project_id': 'project_id',
        'transfers': 'transfers',
        'fees': 'fees',
        'settlements': 'settlements',
        'debits': 'debits',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, type=None, status=None, participant=None, outstanding=None, amount=None, reference=None, intent_id=None, project_id=None, transfers=None, fees=None, settlements=None, debits=None, metadata=None):  # noqa: E501
        """Checkout - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._type = None
        self._status = None
        self._participant = None
        self._outstanding = None
        self._amount = None
        self._reference = None
        self._intent_id = None
        self._project_id = None
        self._transfers = None
        self._fees = None
        self._settlements = None
        self._debits = None
        self._metadata = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if participant is not None:
            self.participant = participant
        if outstanding is not None:
            self.outstanding = outstanding
        if amount is not None:
            self.amount = amount
        if reference is not None:
            self.reference = reference
        if intent_id is not None:
            self.intent_id = intent_id
        if project_id is not None:
            self.project_id = project_id
        if transfers is not None:
            self.transfers = transfers
        if fees is not None:
            self.fees = fees
        if settlements is not None:
            self.settlements = settlements
        if debits is not None:
            self.debits = debits
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this Checkout.  # noqa: E501

        A unique ID for the checkout.  A string in the format `checkout_[0-9a-z]`.  # noqa: E501

        :return: The id of this Checkout.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Checkout.

        A unique ID for the checkout.  A string in the format `checkout_[0-9a-z]`.  # noqa: E501

        :param id: The id of this Checkout.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Checkout.  # noqa: E501

        The date the checkout was created.  # noqa: E501

        :return: The created_at of this Checkout.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Checkout.

        The date the checkout was created.  # noqa: E501

        :param created_at: The created_at of this Checkout.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Checkout.  # noqa: E501

        The date the checkout was last updated.  # noqa: E501

        :return: The updated_at of this Checkout.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Checkout.

        The date the checkout was last updated.  # noqa: E501

        :param updated_at: The updated_at of this Checkout.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def type(self):
        """Gets the type of this Checkout.  # noqa: E501


        :return: The type of this Checkout.  # noqa: E501
        :rtype: CheckoutType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Checkout.


        :param type: The type of this Checkout.  # noqa: E501
        :type: CheckoutType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Checkout.  # noqa: E501


        :return: The status of this Checkout.  # noqa: E501
        :rtype: CheckoutStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Checkout.


        :param status: The status of this Checkout.  # noqa: E501
        :type: CheckoutStatus
        """

        self._status = status

    @property
    def participant(self):
        """Gets the participant of this Checkout.  # noqa: E501


        :return: The participant of this Checkout.  # noqa: E501
        :rtype: KnownParticipant
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this Checkout.


        :param participant: The participant of this Checkout.  # noqa: E501
        :type: KnownParticipant
        """

        self._participant = participant

    @property
    def outstanding(self):
        """Gets the outstanding of this Checkout.  # noqa: E501

        The outstanding amount on the checkout to compare against the original amount set by the payment intent.  Signifies if the checkout has been under or overfunded. In the case of overfunding, the value will be negative.  # noqa: E501

        :return: The outstanding of this Checkout.  # noqa: E501
        :rtype: int
        """
        return self._outstanding

    @outstanding.setter
    def outstanding(self, outstanding):
        """Sets the outstanding of this Checkout.

        The outstanding amount on the checkout to compare against the original amount set by the payment intent.  Signifies if the checkout has been under or overfunded. In the case of overfunding, the value will be negative.  # noqa: E501

        :param outstanding: The outstanding of this Checkout.  # noqa: E501
        :type: int
        """

        self._outstanding = outstanding

    @property
    def amount(self):
        """Gets the amount of this Checkout.  # noqa: E501

        The amount of the checkout.  # noqa: E501

        :return: The amount of this Checkout.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Checkout.

        The amount of the checkout.  # noqa: E501

        :param amount: The amount of this Checkout.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def reference(self):
        """Gets the reference of this Checkout.  # noqa: E501

        The unique reference for the checkout.  # noqa: E501

        :return: The reference of this Checkout.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Checkout.

        The unique reference for the checkout.  # noqa: E501

        :param reference: The reference of this Checkout.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def intent_id(self):
        """Gets the intent_id of this Checkout.  # noqa: E501

        The unique ID of the intent which caused the checkout to be created. This value will be null if the checkout was created via our Direct mechanism.  # noqa: E501

        :return: The intent_id of this Checkout.  # noqa: E501
        :rtype: str
        """
        return self._intent_id

    @intent_id.setter
    def intent_id(self, intent_id):
        """Sets the intent_id of this Checkout.

        The unique ID of the intent which caused the checkout to be created. This value will be null if the checkout was created via our Direct mechanism.  # noqa: E501

        :param intent_id: The intent_id of this Checkout.  # noqa: E501
        :type: str
        """

        self._intent_id = intent_id

    @property
    def project_id(self):
        """Gets the project_id of this Checkout.  # noqa: E501

        The unique ID of the project which this checkout will fund.  # noqa: E501

        :return: The project_id of this Checkout.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Checkout.

        The unique ID of the project which this checkout will fund.  # noqa: E501

        :param project_id: The project_id of this Checkout.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def transfers(self):
        """Gets the transfers of this Checkout.  # noqa: E501

        The `transfers` key historically used to represent the fees associated with the given checkout, since these fees are \"transfered\" to the partner revenue accounts.  These fee transfers will now be listed under the `fees` key.  While `transfers` going forward, will globally denote within-system fund movements initiated by the API user.  # noqa: E501

        :return: The transfers of this Checkout.  # noqa: E501
        :rtype: list[Transfer]
        """
        return self._transfers

    @transfers.setter
    def transfers(self, transfers):
        """Sets the transfers of this Checkout.

        The `transfers` key historically used to represent the fees associated with the given checkout, since these fees are \"transfered\" to the partner revenue accounts.  These fee transfers will now be listed under the `fees` key.  While `transfers` going forward, will globally denote within-system fund movements initiated by the API user.  # noqa: E501

        :param transfers: The transfers of this Checkout.  # noqa: E501
        :type: list[Transfer]
        """

        self._transfers = transfers

    @property
    def fees(self):
        """Gets the fees of this Checkout.  # noqa: E501

        A list of fee transfers associated with the checkout.  # noqa: E501

        :return: The fees of this Checkout.  # noqa: E501
        :rtype: list[Fee]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this Checkout.

        A list of fee transfers associated with the checkout.  # noqa: E501

        :param fees: The fees of this Checkout.  # noqa: E501
        :type: list[Fee]
        """

        self._fees = fees

    @property
    def settlements(self):
        """Gets the settlements of this Checkout.  # noqa: E501

        A list of settlements that were targeted by the checkout.  # noqa: E501

        :return: The settlements of this Checkout.  # noqa: E501
        :rtype: list[Settlement]
        """
        return self._settlements

    @settlements.setter
    def settlements(self, settlements):
        """Sets the settlements of this Checkout.

        A list of settlements that were targeted by the checkout.  # noqa: E501

        :param settlements: The settlements of this Checkout.  # noqa: E501
        :type: list[Settlement]
        """

        self._settlements = settlements

    @property
    def debits(self):
        """Gets the debits of this Checkout.  # noqa: E501

        A list of direct debit payments that have been scheduled by the checkout.  # noqa: E501

        :return: The debits of this Checkout.  # noqa: E501
        :rtype: list[Debit]
        """
        return self._debits

    @debits.setter
    def debits(self, debits):
        """Sets the debits of this Checkout.

        A list of direct debit payments that have been scheduled by the checkout.  # noqa: E501

        :param debits: The debits of this Checkout.  # noqa: E501
        :type: list[Debit]
        """

        self._debits = debits

    @property
    def metadata(self):
        """Gets the metadata of this Checkout.  # noqa: E501

        The metadata that was provided at the creation of the payment intent that caused this checkout.  # noqa: E501

        :return: The metadata of this Checkout.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Checkout.

        The metadata that was provided at the creation of the payment intent that caused this checkout.  # noqa: E501

        :param metadata: The metadata of this Checkout.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Checkout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Checkout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
