# coding: utf-8

"""
    trustshare API

    Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # noqa: E501

    OpenAPI spec version: 1.0.23
    Contact: support@trustshare.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SessionIntent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'participant': 'KnownParticipant',
        'client_secret': 'str',
        'status': 'IntentStatus',
        'type': 'IntentOutputType',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'participant': 'participant',
        'client_secret': 'client_secret',
        'status': 'status',
        'type': 'type',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, participant=None, client_secret=None, status=None, type=None, metadata=None):  # noqa: E501
        """SessionIntent - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._participant = None
        self._client_secret = None
        self._status = None
        self._type = None
        self._metadata = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if participant is not None:
            self.participant = participant
        if client_secret is not None:
            self.client_secret = client_secret
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this SessionIntent.  # noqa: E501

        The unique identifier of the created intent.  # noqa: E501

        :return: The id of this SessionIntent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SessionIntent.

        The unique identifier of the created intent.  # noqa: E501

        :param id: The id of this SessionIntent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this SessionIntent.  # noqa: E501

        The date the setup intent was created.  # noqa: E501

        :return: The created_at of this SessionIntent.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SessionIntent.

        The date the setup intent was created.  # noqa: E501

        :param created_at: The created_at of this SessionIntent.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SessionIntent.  # noqa: E501

        The date the setup intent was last updated.  # noqa: E501

        :return: The updated_at of this SessionIntent.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SessionIntent.

        The date the setup intent was last updated.  # noqa: E501

        :param updated_at: The updated_at of this SessionIntent.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def participant(self):
        """Gets the participant of this SessionIntent.  # noqa: E501


        :return: The participant of this SessionIntent.  # noqa: E501
        :rtype: KnownParticipant
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this SessionIntent.


        :param participant: The participant of this SessionIntent.  # noqa: E501
        :type: KnownParticipant
        """

        self._participant = participant

    @property
    def client_secret(self):
        """Gets the client_secret of this SessionIntent.  # noqa: E501

        The client secret for the intent.  <Note>   This secret should __never__ be stored on a backend system and should always   be directly passed down to the expected participant's device. </Note>  # noqa: E501

        :return: The client_secret of this SessionIntent.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this SessionIntent.

        The client secret for the intent.  <Note>   This secret should __never__ be stored on a backend system and should always   be directly passed down to the expected participant's device. </Note>  # noqa: E501

        :param client_secret: The client_secret of this SessionIntent.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def status(self):
        """Gets the status of this SessionIntent.  # noqa: E501


        :return: The status of this SessionIntent.  # noqa: E501
        :rtype: IntentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SessionIntent.


        :param status: The status of this SessionIntent.  # noqa: E501
        :type: IntentStatus
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this SessionIntent.  # noqa: E501


        :return: The type of this SessionIntent.  # noqa: E501
        :rtype: IntentOutputType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SessionIntent.


        :param type: The type of this SessionIntent.  # noqa: E501
        :type: IntentOutputType
        """

        self._type = type

    @property
    def metadata(self):
        """Gets the metadata of this SessionIntent.  # noqa: E501

        The metadata that was provided at the creation of the setup intent.  # noqa: E501

        :return: The metadata of this SessionIntent.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SessionIntent.

        The metadata that was provided at the creation of the setup intent.  # noqa: E501

        :param metadata: The metadata of this SessionIntent.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionIntent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionIntent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
