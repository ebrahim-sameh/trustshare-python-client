# coding: utf-8

"""
    trustshare API

    Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # noqa: E501

    OpenAPI spec version: 1.0.23
    Contact: support@trustshare.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Outbound(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'release_at': 'str',
        'project_id': 'str',
        'settlement_id': 'str',
        'type': 'OutboundType',
        'status': 'OutboundStatus',
        'amount': 'int',
        'to': 'KnownParticipant',
        'transfers': 'list[Transfer]',
        'fees': 'list[Fee]',
        'transfer': 'ProjectTransferOut',
        'conversion': 'Conversion',
        'paused_reason': 'OutboundPausedReason',
        'failure_reason': 'OutboundFailureReason',
        'reference': 'str',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'release_at': 'release_at',
        'project_id': 'project_id',
        'settlement_id': 'settlement_id',
        'type': 'type',
        'status': 'status',
        'amount': 'amount',
        'to': 'to',
        'transfers': 'transfers',
        'fees': 'fees',
        'transfer': 'transfer',
        'conversion': 'conversion',
        'paused_reason': 'paused_reason',
        'failure_reason': 'failure_reason',
        'reference': 'reference',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, release_at=None, project_id=None, settlement_id=None, type=None, status=None, amount=None, to=None, transfers=None, fees=None, transfer=None, conversion=None, paused_reason=None, failure_reason=None, reference=None, metadata=None):  # noqa: E501
        """Outbound - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._release_at = None
        self._project_id = None
        self._settlement_id = None
        self._type = None
        self._status = None
        self._amount = None
        self._to = None
        self._transfers = None
        self._fees = None
        self._transfer = None
        self._conversion = None
        self._paused_reason = None
        self._failure_reason = None
        self._reference = None
        self._metadata = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if release_at is not None:
            self.release_at = release_at
        if project_id is not None:
            self.project_id = project_id
        if settlement_id is not None:
            self.settlement_id = settlement_id
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if amount is not None:
            self.amount = amount
        if to is not None:
            self.to = to
        if transfers is not None:
            self.transfers = transfers
        if fees is not None:
            self.fees = fees
        if transfer is not None:
            self.transfer = transfer
        if conversion is not None:
            self.conversion = conversion
        if paused_reason is not None:
            self.paused_reason = paused_reason
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if reference is not None:
            self.reference = reference
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this Outbound.  # noqa: E501

        A unique ID for the outbound.  A string in the format `outbound_[0-9a-z]`.  # noqa: E501

        :return: The id of this Outbound.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Outbound.

        A unique ID for the outbound.  A string in the format `outbound_[0-9a-z]`.  # noqa: E501

        :param id: The id of this Outbound.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Outbound.  # noqa: E501

        The date the outbound was created.  # noqa: E501

        :return: The created_at of this Outbound.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Outbound.

        The date the outbound was created.  # noqa: E501

        :param created_at: The created_at of this Outbound.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Outbound.  # noqa: E501

        The date the outbound was last updated.  # noqa: E501

        :return: The updated_at of this Outbound.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Outbound.

        The date the outbound was last updated.  # noqa: E501

        :param updated_at: The updated_at of this Outbound.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def release_at(self):
        """Gets the release_at of this Outbound.  # noqa: E501

        The date that describes when the funds will be automatically released.  Verification will be eagerly attempted if required.  # noqa: E501

        :return: The release_at of this Outbound.  # noqa: E501
        :rtype: str
        """
        return self._release_at

    @release_at.setter
    def release_at(self, release_at):
        """Sets the release_at of this Outbound.

        The date that describes when the funds will be automatically released.  Verification will be eagerly attempted if required.  # noqa: E501

        :param release_at: The release_at of this Outbound.  # noqa: E501
        :type: str
        """

        self._release_at = release_at

    @property
    def project_id(self):
        """Gets the project_id of this Outbound.  # noqa: E501

        The project ID the outbound was created against.  # noqa: E501

        :return: The project_id of this Outbound.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Outbound.

        The project ID the outbound was created against.  # noqa: E501

        :param project_id: The project_id of this Outbound.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def settlement_id(self):
        """Gets the settlement_id of this Outbound.  # noqa: E501

        The settlement ID the outbound was created against. In the event funds were released directly from a project, this value will be null.  # noqa: E501

        :return: The settlement_id of this Outbound.  # noqa: E501
        :rtype: str
        """
        return self._settlement_id

    @settlement_id.setter
    def settlement_id(self, settlement_id):
        """Sets the settlement_id of this Outbound.

        The settlement ID the outbound was created against. In the event funds were released directly from a project, this value will be null.  # noqa: E501

        :param settlement_id: The settlement_id of this Outbound.  # noqa: E501
        :type: str
        """

        self._settlement_id = settlement_id

    @property
    def type(self):
        """Gets the type of this Outbound.  # noqa: E501


        :return: The type of this Outbound.  # noqa: E501
        :rtype: OutboundType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Outbound.


        :param type: The type of this Outbound.  # noqa: E501
        :type: OutboundType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Outbound.  # noqa: E501


        :return: The status of this Outbound.  # noqa: E501
        :rtype: OutboundStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Outbound.


        :param status: The status of this Outbound.  # noqa: E501
        :type: OutboundStatus
        """

        self._status = status

    @property
    def amount(self):
        """Gets the amount of this Outbound.  # noqa: E501

        The amount of the outbound.  # noqa: E501

        :return: The amount of this Outbound.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Outbound.

        The amount of the outbound.  # noqa: E501

        :param amount: The amount of this Outbound.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def to(self):
        """Gets the to of this Outbound.  # noqa: E501


        :return: The to of this Outbound.  # noqa: E501
        :rtype: KnownParticipant
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Outbound.


        :param to: The to of this Outbound.  # noqa: E501
        :type: KnownParticipant
        """

        self._to = to

    @property
    def transfers(self):
        """Gets the transfers of this Outbound.  # noqa: E501

        The `transfers` key historically used to represent the fees associated with the given outbound, since these fees are \"transfered\" to the partner revenue accounts.  These fee transfers will now be listed under the `fees` key.  While `transfers` going forward, will globally denote within-system fund movements initiated by the API user.  # noqa: E501

        :return: The transfers of this Outbound.  # noqa: E501
        :rtype: list[Transfer]
        """
        return self._transfers

    @transfers.setter
    def transfers(self, transfers):
        """Sets the transfers of this Outbound.

        The `transfers` key historically used to represent the fees associated with the given outbound, since these fees are \"transfered\" to the partner revenue accounts.  These fee transfers will now be listed under the `fees` key.  While `transfers` going forward, will globally denote within-system fund movements initiated by the API user.  # noqa: E501

        :param transfers: The transfers of this Outbound.  # noqa: E501
        :type: list[Transfer]
        """

        self._transfers = transfers

    @property
    def fees(self):
        """Gets the fees of this Outbound.  # noqa: E501

        A list of any fees created as the result of the outbound.  # noqa: E501

        :return: The fees of this Outbound.  # noqa: E501
        :rtype: list[Fee]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this Outbound.

        A list of any fees created as the result of the outbound.  # noqa: E501

        :param fees: The fees of this Outbound.  # noqa: E501
        :type: list[Fee]
        """

        self._fees = fees

    @property
    def transfer(self):
        """Gets the transfer of this Outbound.  # noqa: E501


        :return: The transfer of this Outbound.  # noqa: E501
        :rtype: ProjectTransferOut
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this Outbound.


        :param transfer: The transfer of this Outbound.  # noqa: E501
        :type: ProjectTransferOut
        """

        self._transfer = transfer

    @property
    def conversion(self):
        """Gets the conversion of this Outbound.  # noqa: E501


        :return: The conversion of this Outbound.  # noqa: E501
        :rtype: Conversion
        """
        return self._conversion

    @conversion.setter
    def conversion(self, conversion):
        """Sets the conversion of this Outbound.


        :param conversion: The conversion of this Outbound.  # noqa: E501
        :type: Conversion
        """

        self._conversion = conversion

    @property
    def paused_reason(self):
        """Gets the paused_reason of this Outbound.  # noqa: E501


        :return: The paused_reason of this Outbound.  # noqa: E501
        :rtype: OutboundPausedReason
        """
        return self._paused_reason

    @paused_reason.setter
    def paused_reason(self, paused_reason):
        """Sets the paused_reason of this Outbound.


        :param paused_reason: The paused_reason of this Outbound.  # noqa: E501
        :type: OutboundPausedReason
        """

        self._paused_reason = paused_reason

    @property
    def failure_reason(self):
        """Gets the failure_reason of this Outbound.  # noqa: E501


        :return: The failure_reason of this Outbound.  # noqa: E501
        :rtype: OutboundFailureReason
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this Outbound.


        :param failure_reason: The failure_reason of this Outbound.  # noqa: E501
        :type: OutboundFailureReason
        """

        self._failure_reason = failure_reason

    @property
    def reference(self):
        """Gets the reference of this Outbound.  # noqa: E501

        The reference that will be used for the outbound.  The reference can be up to 18 characters in length and supports `a-z`, `A-Z`, `0-9`, `-`, and space characters.  # noqa: E501

        :return: The reference of this Outbound.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Outbound.

        The reference that will be used for the outbound.  The reference can be up to 18 characters in length and supports `a-z`, `A-Z`, `0-9`, `-`, and space characters.  # noqa: E501

        :param reference: The reference of this Outbound.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def metadata(self):
        """Gets the metadata of this Outbound.  # noqa: E501

        The metadata that was provided at the creation of the release or refund.  # noqa: E501

        :return: The metadata of this Outbound.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Outbound.

        The metadata that was provided at the creation of the release or refund.  # noqa: E501

        :param metadata: The metadata of this Outbound.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Outbound, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Outbound):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
