# coding: utf-8

"""
    trustshare API

    Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # noqa: E501

    OpenAPI spec version: 1.0.23
    Contact: support@trustshare.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'country': 'Country',
        'currency': 'BankAccountCurrency',
        'account_number': 'str',
        'routing_code': 'str',
        'routing_code_type': 'RoutingCodeType',
        'routing_data': 'object'
    }

    attribute_map = {
        'id': 'id',
        'country': 'country',
        'currency': 'currency',
        'account_number': 'account_number',
        'routing_code': 'routing_code',
        'routing_code_type': 'routing_code_type',
        'routing_data': 'routing_data'
    }

    def __init__(self, id=None, country=None, currency=None, account_number=None, routing_code=None, routing_code_type=None, routing_data=None):  # noqa: E501
        """BankAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._country = None
        self._currency = None
        self._account_number = None
        self._routing_code = None
        self._routing_code_type = None
        self._routing_data = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if country is not None:
            self.country = country
        if currency is not None:
            self.currency = currency
        if account_number is not None:
            self.account_number = account_number
        if routing_code is not None:
            self.routing_code = routing_code
        if routing_code_type is not None:
            self.routing_code_type = routing_code_type
        if routing_data is not None:
            self.routing_data = routing_data

    @property
    def id(self):
        """Gets the id of this BankAccount.  # noqa: E501

        A unique ID for the bank_account.  A string in the format `bank_account_[0-9a-z]`.  # noqa: E501

        :return: The id of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankAccount.

        A unique ID for the bank_account.  A string in the format `bank_account_[0-9a-z]`.  # noqa: E501

        :param id: The id of this BankAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def country(self):
        """Gets the country of this BankAccount.  # noqa: E501


        :return: The country of this BankAccount.  # noqa: E501
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BankAccount.


        :param country: The country of this BankAccount.  # noqa: E501
        :type: Country
        """

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this BankAccount.  # noqa: E501


        :return: The currency of this BankAccount.  # noqa: E501
        :rtype: BankAccountCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BankAccount.


        :param currency: The currency of this BankAccount.  # noqa: E501
        :type: BankAccountCurrency
        """

        self._currency = currency

    @property
    def account_number(self):
        """Gets the account_number of this BankAccount.  # noqa: E501

        The account number of the bank account.  # noqa: E501

        :return: The account_number of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAccount.

        The account number of the bank account.  # noqa: E501

        :param account_number: The account_number of this BankAccount.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def routing_code(self):
        """Gets the routing_code of this BankAccount.  # noqa: E501

        The routing code of the bank account.  # noqa: E501

        :return: The routing_code of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._routing_code

    @routing_code.setter
    def routing_code(self, routing_code):
        """Sets the routing_code of this BankAccount.

        The routing code of the bank account.  # noqa: E501

        :param routing_code: The routing_code of this BankAccount.  # noqa: E501
        :type: str
        """

        self._routing_code = routing_code

    @property
    def routing_code_type(self):
        """Gets the routing_code_type of this BankAccount.  # noqa: E501


        :return: The routing_code_type of this BankAccount.  # noqa: E501
        :rtype: RoutingCodeType
        """
        return self._routing_code_type

    @routing_code_type.setter
    def routing_code_type(self, routing_code_type):
        """Sets the routing_code_type of this BankAccount.


        :param routing_code_type: The routing_code_type of this BankAccount.  # noqa: E501
        :type: RoutingCodeType
        """

        self._routing_code_type = routing_code_type

    @property
    def routing_data(self):
        """Gets the routing_data of this BankAccount.  # noqa: E501

        An object potentially containing further routing data.  # noqa: E501

        :return: The routing_data of this BankAccount.  # noqa: E501
        :rtype: object
        """
        return self._routing_data

    @routing_data.setter
    def routing_data(self, routing_data):
        """Sets the routing_data of this BankAccount.

        An object potentially containing further routing data.  # noqa: E501

        :param routing_data: The routing_data of this BankAccount.  # noqa: E501
        :type: object
        """

        self._routing_data = routing_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
