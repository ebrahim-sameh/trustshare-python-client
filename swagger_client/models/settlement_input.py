# coding: utf-8

"""
    trustshare API

    Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # noqa: E501

    OpenAPI spec version: 1.0.23
    Contact: support@trustshare.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SettlementInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'SettlementType',
        'to': 'SettlementTargetInput',
        'amount': 'int',
        'description': 'str',
        'summary': 'str',
        'fee_flat': 'int',
        'fee_percentage': 'float',
        'tax_flat': 'int',
        'tax_percentage': 'float',
        'required_by': 'str',
        'release_at': 'str',
        'reference': 'str',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'to': 'to',
        'amount': 'amount',
        'description': 'description',
        'summary': 'summary',
        'fee_flat': 'fee_flat',
        'fee_percentage': 'fee_percentage',
        'tax_flat': 'tax_flat',
        'tax_percentage': 'tax_percentage',
        'required_by': 'required_by',
        'release_at': 'release_at',
        'reference': 'reference',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, type=None, to=None, amount=None, description=None, summary=None, fee_flat=None, fee_percentage=None, tax_flat=None, tax_percentage=None, required_by=None, release_at=None, reference=None, metadata=None):  # noqa: E501
        """SettlementInput - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._to = None
        self._amount = None
        self._description = None
        self._summary = None
        self._fee_flat = None
        self._fee_percentage = None
        self._tax_flat = None
        self._tax_percentage = None
        self._required_by = None
        self._release_at = None
        self._reference = None
        self._metadata = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if to is not None:
            self.to = to
        if amount is not None:
            self.amount = amount
        if description is not None:
            self.description = description
        if summary is not None:
            self.summary = summary
        if fee_flat is not None:
            self.fee_flat = fee_flat
        if fee_percentage is not None:
            self.fee_percentage = fee_percentage
        if tax_flat is not None:
            self.tax_flat = tax_flat
        if tax_percentage is not None:
            self.tax_percentage = tax_percentage
        if required_by is not None:
            self.required_by = required_by
        if release_at is not None:
            self.release_at = release_at
        if reference is not None:
            self.reference = reference
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this SettlementInput.  # noqa: E501

        An ID of an existing settlement to target, allowing a user to Checkout against a settlement with a discrepancy or a settlement required at a future date.  A string in the format `settlement_[0-9a-z]`.  # noqa: E501

        :return: The id of this SettlementInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SettlementInput.

        An ID of an existing settlement to target, allowing a user to Checkout against a settlement with a discrepancy or a settlement required at a future date.  A string in the format `settlement_[0-9a-z]`.  # noqa: E501

        :param id: The id of this SettlementInput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this SettlementInput.  # noqa: E501


        :return: The type of this SettlementInput.  # noqa: E501
        :rtype: SettlementType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SettlementInput.


        :param type: The type of this SettlementInput.  # noqa: E501
        :type: SettlementType
        """

        self._type = type

    @property
    def to(self):
        """Gets the to of this SettlementInput.  # noqa: E501


        :return: The to of this SettlementInput.  # noqa: E501
        :rtype: SettlementTargetInput
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SettlementInput.


        :param to: The to of this SettlementInput.  # noqa: E501
        :type: SettlementTargetInput
        """

        self._to = to

    @property
    def amount(self):
        """Gets the amount of this SettlementInput.  # noqa: E501

        The amount of the settlement described in the lowest denomination for the intent's currency. ie, £1,000.00 should be provided as `100000`.  # noqa: E501

        :return: The amount of this SettlementInput.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SettlementInput.

        The amount of the settlement described in the lowest denomination for the intent's currency. ie, £1,000.00 should be provided as `100000`.  # noqa: E501

        :param amount: The amount of this SettlementInput.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this SettlementInput.  # noqa: E501

        A description of the settlement that will be displayed as a line item in the Checkout UI.  # noqa: E501

        :return: The description of this SettlementInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SettlementInput.

        A description of the settlement that will be displayed as a line item in the Checkout UI.  # noqa: E501

        :param description: The description of this SettlementInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def summary(self):
        """Gets the summary of this SettlementInput.  # noqa: E501

        A further summary of the settlement that will be displayed under the line item in the Checkout UI.  # noqa: E501

        :return: The summary of this SettlementInput.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this SettlementInput.

        A further summary of the settlement that will be displayed under the line item in the Checkout UI.  # noqa: E501

        :param summary: The summary of this SettlementInput.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def fee_flat(self):
        """Gets the fee_flat of this SettlementInput.  # noqa: E501

        A flat fee to charge the beneficiary Participant on successfully releasing funds from the settlement.  Fees are calculated in the following way: (`total` * (1 + `fee_percentage`)) + `fee_flat`.  # noqa: E501

        :return: The fee_flat of this SettlementInput.  # noqa: E501
        :rtype: int
        """
        return self._fee_flat

    @fee_flat.setter
    def fee_flat(self, fee_flat):
        """Sets the fee_flat of this SettlementInput.

        A flat fee to charge the beneficiary Participant on successfully releasing funds from the settlement.  Fees are calculated in the following way: (`total` * (1 + `fee_percentage`)) + `fee_flat`.  # noqa: E501

        :param fee_flat: The fee_flat of this SettlementInput.  # noqa: E501
        :type: int
        """

        self._fee_flat = fee_flat

    @property
    def fee_percentage(self):
        """Gets the fee_percentage of this SettlementInput.  # noqa: E501

        A fee percentage to charge the beneficiary Participant on successfully releasing funds from the settlement. Fee percentages must be provided as a fraction, ie. 1.5% as 0.015.  Fees are calculated in the following way: (`total` * (1 + `fee_percentage`)) + `fee_flat`.  # noqa: E501

        :return: The fee_percentage of this SettlementInput.  # noqa: E501
        :rtype: float
        """
        return self._fee_percentage

    @fee_percentage.setter
    def fee_percentage(self, fee_percentage):
        """Sets the fee_percentage of this SettlementInput.

        A fee percentage to charge the beneficiary Participant on successfully releasing funds from the settlement. Fee percentages must be provided as a fraction, ie. 1.5% as 0.015.  Fees are calculated in the following way: (`total` * (1 + `fee_percentage`)) + `fee_flat`.  # noqa: E501

        :param fee_percentage: The fee_percentage of this SettlementInput.  # noqa: E501
        :type: float
        """

        self._fee_percentage = fee_percentage

    @property
    def tax_flat(self):
        """Gets the tax_flat of this SettlementInput.  # noqa: E501

        A pre-computed flat tax charge that has been added to the value of the settlement. The settlement amount should be inclusive of this value.  Flat tax amount must be described in the lowest denomination for the intent's currency. ie, £20.00 should be provided as `2000`.  Assuming a 20% tax rate and a line item for a value of £100, `amount` and `tax_flat` should be: ```   {     ...     \"amount\": 12000,     \"tax_flat\": 2000,     ...   } ```  `tax_flat` and `tax_percentage` are mutually exlusive for the same settlement.  # noqa: E501

        :return: The tax_flat of this SettlementInput.  # noqa: E501
        :rtype: int
        """
        return self._tax_flat

    @tax_flat.setter
    def tax_flat(self, tax_flat):
        """Sets the tax_flat of this SettlementInput.

        A pre-computed flat tax charge that has been added to the value of the settlement. The settlement amount should be inclusive of this value.  Flat tax amount must be described in the lowest denomination for the intent's currency. ie, £20.00 should be provided as `2000`.  Assuming a 20% tax rate and a line item for a value of £100, `amount` and `tax_flat` should be: ```   {     ...     \"amount\": 12000,     \"tax_flat\": 2000,     ...   } ```  `tax_flat` and `tax_percentage` are mutually exlusive for the same settlement.  # noqa: E501

        :param tax_flat: The tax_flat of this SettlementInput.  # noqa: E501
        :type: int
        """

        self._tax_flat = tax_flat

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this SettlementInput.  # noqa: E501

        A pre-computed tax charge that has been added to the value of the settlement, expressed as a percentage. The settlement amount should be inclusive of the computed percentage amount.  Tax percentages must be provided as a fraction, ie. 20% as 0.2.  Assuming a 20% tax rate and a line item for a value of £100, `amount` and `tax_percentage` should be: ```   {     ...     \"amount\": 12000,     \"tax_percentage\": 0.2,     ...   } ```  `tax_flat` and `tax_percentage` are mutually exlusive for the same settlement.  # noqa: E501

        :return: The tax_percentage of this SettlementInput.  # noqa: E501
        :rtype: float
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this SettlementInput.

        A pre-computed tax charge that has been added to the value of the settlement, expressed as a percentage. The settlement amount should be inclusive of the computed percentage amount.  Tax percentages must be provided as a fraction, ie. 20% as 0.2.  Assuming a 20% tax rate and a line item for a value of £100, `amount` and `tax_percentage` should be: ```   {     ...     \"amount\": 12000,     \"tax_percentage\": 0.2,     ...   } ```  `tax_flat` and `tax_percentage` are mutually exlusive for the same settlement.  # noqa: E501

        :param tax_percentage: The tax_percentage of this SettlementInput.  # noqa: E501
        :type: float
        """

        self._tax_percentage = tax_percentage

    @property
    def required_by(self):
        """Gets the required_by of this SettlementInput.  # noqa: E501

        A date that describes when the funds are required. If the funds are required at a future date, the amount will not be included in the total on the Checkout UI.  You can collect funds against this settlement at a later date by creating a new payment intent that targets the settlement ID when the buyer Participant agrees to the Checkout.  # noqa: E501

        :return: The required_by of this SettlementInput.  # noqa: E501
        :rtype: str
        """
        return self._required_by

    @required_by.setter
    def required_by(self, required_by):
        """Sets the required_by of this SettlementInput.

        A date that describes when the funds are required. If the funds are required at a future date, the amount will not be included in the total on the Checkout UI.  You can collect funds against this settlement at a later date by creating a new payment intent that targets the settlement ID when the buyer Participant agrees to the Checkout.  # noqa: E501

        :param required_by: The required_by of this SettlementInput.  # noqa: E501
        :type: str
        """

        self._required_by = required_by

    @property
    def release_at(self):
        """Gets the release_at of this SettlementInput.  # noqa: E501

        A date that describes when the funds should be automatically released.  Verification will be eagerly attempted if required.  # noqa: E501

        :return: The release_at of this SettlementInput.  # noqa: E501
        :rtype: str
        """
        return self._release_at

    @release_at.setter
    def release_at(self, release_at):
        """Sets the release_at of this SettlementInput.

        A date that describes when the funds should be automatically released.  Verification will be eagerly attempted if required.  # noqa: E501

        :param release_at: The release_at of this SettlementInput.  # noqa: E501
        :type: str
        """

        self._release_at = release_at

    @property
    def reference(self):
        """Gets the reference of this SettlementInput.  # noqa: E501

        A reference that will be used for releases from this settlement and will appear on a beneficiary's bank statement.  # noqa: E501

        :return: The reference of this SettlementInput.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SettlementInput.

        A reference that will be used for releases from this settlement and will appear on a beneficiary's bank statement.  # noqa: E501

        :param reference: The reference of this SettlementInput.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def metadata(self):
        """Gets the metadata of this SettlementInput.  # noqa: E501

        A free-form metadata object that you can use to store against the settlement. This is incredibly useful for storing a correlation ID that relates to an entity on your own system.  # noqa: E501

        :return: The metadata of this SettlementInput.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SettlementInput.

        A free-form metadata object that you can use to store against the settlement. This is incredibly useful for storing a correlation ID that relates to an entity on your own system.  # noqa: E501

        :param metadata: The metadata of this SettlementInput.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettlementInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettlementInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
