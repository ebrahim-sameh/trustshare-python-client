# coding: utf-8

"""
    trustshare API

    Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # noqa: E501

    OpenAPI spec version: 1.0.23
    Contact: support@trustshare.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankAccountCurrency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    AED = "aed"
    AFN = "afn"
    ALL = "all"
    AMD = "amd"
    ANG = "ang"
    AOA = "aoa"
    ARS = "ars"
    AUD = "aud"
    AWG = "awg"
    AZN = "azn"
    BAM = "bam"
    BBD = "bbd"
    BDT = "bdt"
    BGN = "bgn"
    BHD = "bhd"
    BIF = "bif"
    BMD = "bmd"
    BND = "bnd"
    BOB = "bob"
    BRL = "brl"
    BSD = "bsd"
    BTN = "btn"
    BWP = "bwp"
    BYN = "byn"
    BZD = "bzd"
    CAD = "cad"
    CDF = "cdf"
    CHF = "chf"
    CLP = "clp"
    CNY = "cny"
    COP = "cop"
    CRC = "crc"
    CUP = "cup"
    CVE = "cve"
    CZK = "czk"
    DJF = "djf"
    DKK = "dkk"
    DOP = "dop"
    DZD = "dzd"
    EGP = "egp"
    ERN = "ern"
    ETB = "etb"
    EUR = "eur"
    FJD = "fjd"
    FKP = "fkp"
    GBP = "gbp"
    GEL = "gel"
    GHS = "ghs"
    GIP = "gip"
    GMD = "gmd"
    GNF = "gnf"
    GTQ = "gtq"
    GYD = "gyd"
    HKD = "hkd"
    HNL = "hnl"
    HRK = "hrk"
    HTG = "htg"
    HUF = "huf"
    IDR = "idr"
    ILS = "ils"
    INR = "inr"
    IQD = "iqd"
    IRR = "irr"
    ISK = "isk"
    JMD = "jmd"
    JOD = "jod"
    JPY = "jpy"
    KES = "kes"
    KGS = "kgs"
    KHR = "khr"
    KMF = "kmf"
    KPW = "kpw"
    KRW = "krw"
    KWD = "kwd"
    KYD = "kyd"
    KZT = "kzt"
    LAK = "lak"
    LBP = "lbp"
    LKR = "lkr"
    LRD = "lrd"
    LSL = "lsl"
    LTL = "ltl"
    LVL = "lvl"
    LYD = "lyd"
    MAD = "mad"
    MDL = "mdl"
    MGA = "mga"
    MKD = "mkd"
    MMK = "mmk"
    MNT = "mnt"
    MOP = "mop"
    MRO = "mro"
    MUR = "mur"
    MVR = "mvr"
    MWK = "mwk"
    MXN = "mxn"
    MYR = "myr"
    MZN = "mzn"
    NAD = "nad"
    NGN = "ngn"
    NIO = "nio"
    NOK = "nok"
    NPR = "npr"
    NZD = "nzd"
    OMR = "omr"
    PAB = "pab"
    PEN = "pen"
    PGK = "pgk"
    PHP = "php"
    PKR = "pkr"
    PLN = "pln"
    PYG = "pyg"
    QAR = "qar"
    RON = "ron"
    RSD = "rsd"
    RUB = "rub"
    RWF = "rwf"
    SAR = "sar"
    SBD = "sbd"
    SCR = "scr"
    SDG = "sdg"
    SEK = "sek"
    SGD = "sgd"
    SHP = "shp"
    SLL = "sll"
    SOS = "sos"
    SRD = "srd"
    SSP = "ssp"
    STD = "std"
    SYP = "syp"
    SZL = "szl"
    THB = "thb"
    TJS = "tjs"
    TMT = "tmt"
    TND = "tnd"
    TOP = "top"
    TRY = "try"
    TTD = "ttd"
    TVD = "tvd"
    TWD = "twd"
    TZS = "tzs"
    UAH = "uah"
    UGX = "ugx"
    USD = "usd"
    UYU = "uyu"
    UZS = "uzs"
    VED = "ved"
    VND = "vnd"
    VUV = "vuv"
    WST = "wst"
    XAF = "xaf"
    XCD = "xcd"
    XOF = "xof"
    XPF = "xpf"
    YER = "yer"
    ZAR = "zar"
    ZMW = "zmw"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """BankAccountCurrency - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankAccountCurrency, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAccountCurrency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
